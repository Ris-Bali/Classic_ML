# -*- coding: utf-8 -*-
"""Random Forest Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nh3cziD3Db_JnYdinq5X0Ac7C6l6UjeK
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/drive/MyDrive/CAR DETAILS FROM CAR DEKHO.csv")

data.head()

data.info()

data.describe()

data.isnull().sum()

fig = plt.figure(figsize=(12,6))
sns.distplot(data["selling_price"])
plt.title("Selling Price Distribution")

sns.set_theme(style="white")
rs = np.random.RandomState(33)
d = pd.DataFrame(data=rs.normal(size=(100, 8)),
                 columns=list(data))
corr = d.corr()
mask = np.triu(np.ones_like(corr, dtype=bool))
f, ax = plt.subplots(figsize=(11, 9))
cmap = sns.diverging_palette(230, 20, as_cmap=True)
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

print(data["seller_type"].unique())
print(data["fuel"].unique())
print(data["owner"].unique())
print(data["transmission"].unique())

data.columns

final_data=data[['year','selling_price','km_driven','fuel','seller_type','transmission','owner']]

final_data["Current_Year"]=2021

final_data

final_data["No of years"] = final_data["Current_Year"]-final_data["year"]

final_data.head()

final_data.drop(['year'],axis=1,inplace=True)
final_data.drop(['Current_Year'],axis=1,inplace=True)

final_data.head()

final_data=pd.get_dummies(final_data,drop_first=True)

final_data

final_data.corr()

corrmat=final_data.corr()
top_corr_features=corrmat.index
plt.figure(figsize=(15,15))
g=sns.heatmap(final_data[top_corr_features].corr(),annot=True,cmap="RdYlGn")

Y = final_data["selling_price"]
Y=Y.astype('float')

X=final_data.drop("selling_price",axis=1)

X = X.astype('float')

Y=Y.values
X = X .values

print(X)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=1)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test= sc.transform(X_test)

from sklearn.ensemble import RandomForestRegressor
reg = RandomForestRegressor()
reg.fit(X_train,Y_train)

train_acc=reg.score(X_train,Y_train)
test_acc=reg.score(X_test,Y_test)
print('Training Accuracy: ',round(train_acc*100, 2),'%')
print('Testing Accuracy: ',round(test_acc*100, 2),'%')